I"^<p>파이썬을 공부하다보니 인터프리터와 컴파일러에 대해 기본적인 개념정도는 알아두어야 하겠다는 생각을 했다.</p>

<p>그래서 이번 포스팅에서는 인터프리터와 컴파일러에 대해 간략하게나마 이야기 해보려 한다.</p>

<h1 id="목차">목차</h1>
<ul>
  <li>컴파일러</li>
  <li>인터프리터</li>
  <li>차이점</li>
</ul>

<h1 id="컴파일러">컴파일러</h1>
<p>위키백과에서는 컴파일러에 대해 다음과 같이 정의한다.</p>

<blockquote>
  <p>컴파일러는 특정 프로그래밍 언어로 쓰여 있는 문서를 다른 프로그래밍 언어로 옮기는 프로그램을 말한다.</p>
</blockquote>

<p><img src="images/2020-11-14/1.png" alt="1" /></p>

<p>다른 프로그래밍 언어로 해석하기만 모두 컴파일러라고 할 수 있다.</p>

<p>극단적인 예로는 기계어에서 c언어로 해석해도 컴파일러이지만</p>

<p>보통, 고수준 언어에서 저수준 언어로 번역하는 것을 컴파일러라고 한다.</p>

<p>이 방식의 장점은 실행 속도에 있다.</p>

<p>목적 언어가 기계어일 경우 실행할 때 따로 추가적인 컴파일작업이 필요하지 않기 때문에,</p>

<p>컴파일 이슈로 인한 지연은 아예 발생하지 않는다.</p>

<p>하지만 수정 후 테스트를 위해선 다시 컴파일을 해야 한다는 문제점이 있다.</p>

<p>이것은 개발과정에 있어서 큰 시간적 비용을 야기하기 때문에 개발하는 시간을 늦추는 큰 원인이 된다.</p>

<h1 id="인터프리터">인터프리터</h1>

<p>인터프리터는 소스코드를 실행시키는 컴퓨터 프로그램이나 환경을 말한다.</p>

<p>실행파일이 따로 존재하지 않으며, 소스코드로부터 바로 실행을 한다.</p>

<p>소스코드를 한 줄씩 읽어 실행시킨다.</p>

<p><img src="images/2020-11-14/2.png" alt="1" /></p>

<p>이 방식은 실행 파일을 만들기 위해 컴파일을 하지 않기 때문에, 수정하고 바로 테스트할 수 있다는 큰 장점이 있다.</p>

<p>하지만 실행과정에서 소스코드를 결과적으로 실행시킬 수 있는 형태로 해석을 해야하기 때문에</p>

<p>실행시간에서 지연이 발생하게 된다.</p>

<p>대표적으로는 파이썬 인터프리터가 있다.</p>

<h1 id="차이점">차이점</h1>

<p>큰 차이점은 소스코드의 해석의 시점이다.</p>

<p>컴파일러의 경우 실행 전에 소스코드의 모든 번역을 마친다.</p>

<p>하지만 인터프리터의 경우에는 실행 중에 한 줄, 한 줄 번역 한다.</p>

<p>따라서 인터프리터는 경우에 따라 번역이 되지 않는 부분도 생길 수 있다.</p>

<p>주의해야 할 것은 인터프리터 언어나 컴파일러 언어로 알려진 언어들이 반드시 그 의도대로 구현되지 않을 수도 있다는 것이다.</p>

<p>일반적으로 파이썬은 인터프리터 구현체가 주로 이용되긴 하지만 RPython과 같은 정적 컴파일러 구현체도 존재한다.</p>

<p>또한 소수이나마 C 인터프리터도 존재한다.</p>
:ET