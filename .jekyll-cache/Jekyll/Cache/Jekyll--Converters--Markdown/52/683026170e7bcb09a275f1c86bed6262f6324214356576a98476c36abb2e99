I"qB<h1 id="object-oriented-programming">Object-oriented Programming</h1>

<ul>
  <li>OOP, 객체지향 프로그래밍을 의미한다.</li>
  <li><strong>객체(Object)</strong>는 <strong>속성(Attribute)</strong>와 <strong>행동(action)</strong>을 가진다.</li>
  <li>OOP는 이런 객체 개념을 프로그램으로 표현해 <strong>속성은 변수</strong>, <strong>행동은 메소드</strong>로 표현된다.</li>
  <li><strong>클래스</strong>는 설계도이고 실제 구현체는 <strong>인스턴스</strong>라고 한다.</li>
  <li>파이썬은 객체 지향 프로그래밍 언어이다.</li>
</ul>

<h2 id="class">class</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SoccerPlayer</span><span class="p">([</span><span class="n">상속클래스명</span><span class="p">]):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">back_number</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">back_number</span> <span class="o">=</span> <span class="n">back_number</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"name: {0}, position: [1]"</span>\
               <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">position</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">change_back_number</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">back_number</span> <span class="o">=</span> <span class="n">number</span>
<span class="s">'''
'__init__'는 초기화 함수를 의미한다.
'__str__'은 print() 함수에 객체를 넣었을 때 적절한 스트링을 반환해 주는 예약 함수이다.
self는 객체 자신을 가리키는 키워드이다. 
메소드의 첫 매개변수는 반드시 self여야 하며 매개변수가 없어도 반드시 적어줘야 한다.
'''</span>
</code></pre></div></div>

<h2 id="번외-__의-의미">[번외] <code class="language-plaintext highlighter-rouge">__</code>의 의미</h2>

<p><code class="language-plaintext highlighter-rouge">__</code>는 특수한 예약 함수나 변수 그리고 함수명 변경(맨글링)으로 사용된다.</p>

<ul>
  <li>ex) <code class="language-plaintext highlighter-rouge">__main__</code>, <code class="language-plaintext highlighter-rouge">__str__</code>, <code class="language-plaintext highlighter-rouge">__init__</code></li>
</ul>

<h1 id="oop-characterisitics">OOP characterisitics</h1>

<ul>
  <li><strong>Inheritance(상속)</strong></li>
  <li><strong>Polymorphism(다형성)</strong></li>
  <li><strong>Visibility</strong></li>
</ul>

<h2 id="inheritance상속">Inheritance(상속)</h2>

<p>부모 클래스부터 속성과 메소드를 물려받은 자식 클래스를 생성하는 것</p>

<p><img src="/images/2021-01-21/1.png" alt="1.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(...):</span>
        <span class="p">...</span>
        <span class="p">...</span>

<span class="k">class</span> <span class="nc">Man</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(...):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(...)</span>
        <span class="p">...</span>
<span class="s">'''
super()는 부모 클래스를 의미한다. 부모클래스의 함수를 사용하려면 이 키워드를 사용한다.
'''</span>
</code></pre></div></div>

<h2 id="polymorphism">Polymorphism</h2>

<p>같은 이름 메소드의 <strong>내부 로직을 다르게 작성</strong>을 하는 경우, 부모에게 상속 받은 함수를 다른 자식들과는 다르게 구현할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">animal</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(...):</span>
        <span class="p">...</span>
        <span class="p">...</span>
    
    <span class="k">def</span> <span class="nf">talk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># abstract method
</span>        <span class="n">rase</span> <span class="nb">NotImplementedError</span><span class="p">(</span><span class="s">"Subclass must implement</span><span class="se">\
</span><span class="s">        abstract method"</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">wolf</span><span class="p">(</span><span class="n">animal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">talk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">'Woof!'</span>

<span class="k">class</span> <span class="nc">cat</span><span class="p">(</span><span class="n">animal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">talk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">'Meow'</span>
</code></pre></div></div>

<h2 id="visibility">Visibility</h2>

<p>객체의 정보를 볼 수 있는 레벨을 조절하는 것을 말한다. 모두가 객체 안에 모든 변수를 볼 필요는 없으며, 그래서는 안된다</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">dummy</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(...):</span>
        <span class="n">__items</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="c1"># 변수 이름 앞에 '__' 키워드를 넣으면 외부에서 접근 불가
</span>    
    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">items</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">__items</span>

<span class="n">dum</span> <span class="o">=</span> <span class="n">dummy</span><span class="p">()</span>
<span class="n">dum</span><span class="p">.</span><span class="n">items</span>
<span class="s">'''
`@property`를 써주면 접근할 수 없는 변수이름으로 함수를 선언할 수 있다.
일반적으로는 이렇게 바로 반환하면 안되기 때문에 복사를 하고 반환한다.
'''</span>
</code></pre></div></div>

<h2 id="first-class-objects">First-class objects</h2>

<p>일등 함수 또는 일급 객체, 변수나 데이터 구조에 할당이 가능한 객체를 말한다. 파라메터로 전달이 가능하고 리턴값으로 사용할 수 있다. 파이썬의 함수는 일급함수이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="k">def</span> <span class="nf">f2</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="c1"># 3
</span></code></pre></div></div>

<h2 id="inner-function">Inner function</h2>

<p>함수 내에 또 다른 함수가 존재하는 것을 말한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">inner_func</span><span class="p">():</span>
        <span class="k">return</span> <span class="s">'inner!'</span>
    <span class="k">return</span> <span class="n">inner_func</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="decorator-function">decorator function</h2>

<p>복잡한 클로저 함수를 쉽게 구현할 수 있도록 하는 기능이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"*"</span> <span class="o">*</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"*"</span> <span class="o">*</span> <span class="mi">30</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">inner</span>

<span class="o">@</span><span class="n">decorate</span>
<span class="k">def</span> <span class="nf">printer</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
<span class="s">'''
@ 기호 이후에 decorate(2) 이런 식으로 param을 넣을 수도 있다.
decorate 함수에 차례대로 decorate의 param, printer함수, 
printer의 param 순으로 차례대로 inner함수의 param 값으로 매핑된다.

decorator은 파일 I/0할 때 메모리를 절약할 수 있다.
'''</span>
</code></pre></div></div>

<h1 id="module-and-project">Module and Project</h1>

<h2 id="module">Module</h2>

<p>프로그램의 작은 조각들, 모듈들을 모아서 하나의 큰 프로그램을 개발한다. 패키지는 그런 모듈들을 모아놓은 하나의 단위라고 할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># someModule.py
</span>
<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span>

<span class="c1"># otherPythonFile
</span><span class="kn">import</span> <span class="nn">someModule</span>
<span class="c1"># 이 코드가 실행되는 순간 해당 모듈이 메모리에 적재
# 같은 폴더에 있어야 import됨
</span>
<span class="n">someModule</span><span class="p">.</span><span class="n">func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">someModule</span> <span class="k">as</span> <span class="n">sm</span> 
<span class="c1"># Alias 설정
# 보통 이방식이 가장 일반적이다.
</span>
<span class="n">sm</span><span class="p">.</span><span class="n">func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">someModule</span> <span class="kn">import</span> <span class="n">func</span>
<span class="c1"># 특정 함수나 클래스만 호출
</span>
<span class="n">func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="built-in-module">Built-in module</h3>

<p>파이썬에 내장된 모듈들</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="k">print</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span> <span class="c1"># 0에서 100사이 난수 생성
</span><span class="k">print</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">())</span> <span class="c1"># 일반적인 난수 생성
</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">localtime</span><span class="p">())</span> <span class="c1"># 현재 시간 출력
</span>
<span class="kn">import</span> <span class="nn">urlib.request</span> <span class="c1"># 웹 관련 모듈 추후 다룬다.
</span><span class="n">response</span> <span class="o">=</span> <span class="n">urlib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">'http://thetemlab.io'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="package">Package</h2>

<p>패키지 만들기</p>

<ol>
  <li>기능들을 세부적으로 나눠 폴더로 만듦</li>
  <li>
    <p>각 폴더별로 필요한 모듈을 구현함</p>

    <p><img src="/images/2021-01-21/2.png" alt="2.png" /></p>
  </li>
  <li>파이썬 쉘에서 제대로 작동하는지 테스트</li>
  <li>
    <p>폴더별로 ‘<strong>init</strong>.py’ 구성하기</p>

    <p><img src="/images/2021-01-21/3.png" alt="3.png" /></p>
  </li>
  <li>
    <p>‘<strong>main</strong>.py’ 작성하기</p>

    <p><img src="/images/2021-01-21/4.png" alt="4.png" /></p>
  </li>
</ol>

<h2 id="번외-패키지-참조하는-방법">[번외] 패키지 참조하는 방법</h2>

<p><img src="/images/2021-01-21/5.png" alt="5.png" /></p>

<p>다음과 같이 프로젝트 폴더가 있는 디렉토리에서 프로젝트를 실행할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python game
</code></pre></div></div>

<h2 id="파이썬-가상환경">파이썬 가상환경</h2>

<p>프로젝트 진행 시 패키지 충돌을 방지하기 위해 프로젝트의 목적에 맞게 파이썬 가상환경을 사용한다. 일반적으로 콘다를 많이 사용한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda create <span class="nt">-n</span> <span class="o">[</span>환경 명] <span class="nv">python</span><span class="o">=</span>3.9
<span class="c"># conda 가상환경 설치</span>

<span class="nv">$ </span>conda activate <span class="nt">-n</span> <span class="o">[</span>가상환경]
<span class="c"># 가상환경 활성화</span>

<span class="nv">$ </span>conda deactivate
<span class="c"># 가상환경 비활성화</span>

<span class="nv">$ </span>conda <span class="nb">install</span> <span class="o">[</span>패키지명]
<span class="c"># 가상환경에 패키지 설치</span>
</code></pre></div></div>
:ET